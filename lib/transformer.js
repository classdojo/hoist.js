// Generated by CoffeeScript 1.4.0
(function() {
  var getArrayTypeCaster, getClassTypeCaster, getSimpleDataTypeCaster, getTypeCaster, isa, transformer;

  isa = require("isa");

  /*
  */


  getArrayTypeCaster = function() {
    return function(value) {
      if (isa.array(value)) {
        return value;
      }
      return [value];
    };
  };

  /*
  */


  getSimpleDataTypeCaster = function(typeClass) {
    return function(value) {
      return typeClass(value);
    };
  };

  /*
  */


  getClassTypeCaster = function(typeClass) {
    return function(value) {
      if (value && value.constructor === typeClass) {
        return value;
      }
      return new typeClass(value);
    };
  };

  /*
  */


  getTypeCaster = function(typeClass) {
    if (typeClass === Array) {
      return getArrayTypeCaster();
    }
    if ((typeClass === String) || (typeClass === Number)) {
      return getSimpleDataTypeCaster(typeClass);
    }
    return getClassTypeCaster(typeClass);
  };

  /*
  */


  module.exports = transformer = function(options) {
    var self;
    if (options == null) {
      options = {};
    }
    if (!options.transform) {
      options.transform = function(value) {
        return value;
      };
    }
    self = function(value, next) {
      if (arguments.length === 1) {
        return self.sync(value);
      } else {
        return self.async(value, next);
      }
    };
    /*
    */

    self.options = options;
    /*
    */

    self.async = function(value, next) {
      var onParentResult;
      onParentResult = function(err, result) {
        if (err) {
          return next(err);
        }
        if (options.async) {
          return options.transform(result, next);
        } else {
          return next(null, options.transform(result));
        }
      };
      if (!options.parent) {
        return onParentResult(null, value);
      } else {
        return options.parent.async(value, onParentResult);
      }
    };
    /*
    */

    self.sync = function(value, next) {
      if (options.async) {
        throw new Error("cannot type-cast value synchronously with asynchronous transformer");
      }
      if (options.parent) {
        value = options.parent.sync(value);
      }
      return options.transform(value);
    };
    /*
    */

    self.cast = function(typeClass) {
      return transformer({
        parent: self,
        transform: getTypeCaster(typeClass)
      });
    };
    /*
    */

    self.map = function(fn, test) {
      return transformer({
        parent: self,
        async: fn.length > 1,
        transform: fn
      });
    };
    return self;
  };

}).call(this);
